name: Publish Red Hat Connect Release
on:
  push:
    tags:
      - "v*"
env:
  OPERATOR_NAME: "hazelcast-platform-operator"

jobs:
  publish_image:
    name: Build and Publish
    defaults:
      run:
        shell: bash
    outputs:
      RELEASE_VERSION: ${{ steps.set-outputs.outputs.RELEASE_VERSION }}
      DIGEST: ${{ steps.set-digest.outputs.DIGEST }}
    env:
      SCAN_REGISTRY: "scan.connect.redhat.com"
      TIMEOUT_IN_MINS: "60"
      RHEL_API_KEY: ${{ secrets.RHEL_API_KEY }}
      RHEL_REPOSITORY: ${{ secrets.RHEL_REPOSITORY }}
      RHEL_REPO_PASSWORD: ${{ secrets.RHEL_REPO_PASSWORD }}
      OCP_CLUSTER_URL: ${{ secrets.OCP_CLUSTER_URL }}
      OCP_USERNAME: ${{ secrets.OCP_USERNAME }}
      OCP_PASSWORD: ${{ secrets.OCP_PASSWORD }}
      HZ_LICENSE_KEY: ${{ secrets.HZ_LICENSE_KEY }}
    runs-on: ubuntu-20.04
    steps:
      - name: Set Release Version
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: Checkout to hazelcast-operator
        uses: actions/checkout@v2

      - name: Set environment variables and job outputs
        id: set-outputs
        run: |
          RHEL_IMAGE=${RHEL_REPOSITORY}:${RELEASE_VERSION}
          echo "RHEL_IMAGE=${RHEL_IMAGE}" >> $GITHUB_ENV
          echo "::set-output name=RELEASE_VERSION::${RELEASE_VERSION}"

      - name: Generate Operator and Operator Image
        id: set-digest
        run: |
          echo "Building the operator image"
          make docker-build IMG=${RHEL_IMAGE} VERSION="${RELEASE_VERSION}" PARDOT_ID="redhat"

          DIGEST=$(docker images --no-trunc --quiet $RHEL_IMAGE)
          echo "::set-output name=DIGEST::${DIGEST}"

      - name: Push Hazelcast-Platform-Operator image to RHEL scan registry
        run: |
          docker login ${SCAN_REGISTRY} -u unused -p ${RHEL_REPO_PASSWORD}
          make docker-push IMG=${RHEL_IMAGE}

      - name: Wait for Scan to Complete
        run: |
          PROJECT_ID=$( echo ${RHEL_REPOSITORY} | grep -m 1 -Po "/\K.+(?=/)" )
          source .github/scripts/publish-rhel.sh

          wait_for_container_scan "$PROJECT_ID" "$RELEASE_VERSION" "$RHEL_API_KEY" "$TIMEOUT_IN_MINS"

      - name: Deploy Hazelcast-Platform-Operator to OCP
        run: |
          NAMESPACE=oc-e2e-test-${{ github.run_id}}
          echo "NAMESPACE=${NAMESPACE}" >> $GITHUB_ENV
          oc login ${OCP_CLUSTER_URL} -u=${OCP_USERNAME} -p=${OCP_PASSWORD} --insecure-skip-tls-verify
          oc new-project $NAMESPACE

          oc create secret docker-registry pull-secret \
          --docker-server=$SCAN_REGISTRY \
          --docker-username=unused \
          --docker-password=$RHEL_REPO_PASSWORD \
          --docker-email=unused

          cat <<EOF | oc apply -f -
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: hazelcast-platform-controller-manager
            namespace: $NAMESPACE
          EOF

          oc secrets link hazelcast-platform-controller-manager pull-secret --for=pull
          make deploy  IMG=$RHEL_IMAGE  NAMESPACE=$NAMESPACE PHONE_HOME_ENABLED=false
          oc rollout status deployment hazelcast-platform-controller-manager

      - name: Test the Operator
        run: |
          oc create secret generic hazelcast-license-key --from-literal=license-key=${HZ_LICENSE_KEY}
          make test-e2e NAMESPACE=$NAMESPACE

      - name: Clean up after Tests
        if: always()
        run: |
          make clean-up-namespace NAMESPACE=$NAMESPACE

      - name: Publish the Hazelcast-Platform-Operator image
        run: |
          PROJECT_ID=$( echo ${RHEL_REPOSITORY} | grep -m 1 -Po "/\K.+(?=/)" )
          source .github/scripts/publish-rhel.sh

          publish_the_image "$PROJECT_ID" "$RELEASE_VERSION" "$RHEL_API_KEY"

          wait_for_container_publish "$PROJECT_ID" "$RELEASE_VERSION" "$RHEL_API_KEY" "$TIMEOUT_IN_MINS"

  redhat_bundle_release:
    name: Create a PR in
    runs-on: ubuntu-latest
    needs: publish_image
    strategy:
      fail-fast: false
      matrix:
        include:
          - repo-name: redhat-marketplace-operators
            repo-owner: redhat-openshift-ecosystem

          - repo-name: certified-operators
            repo-owner: redhat-openshift-ecosystem
    env:
      REPO_NAME: ${{ matrix.repo-name }}
      REPO_OWNER: ${{ matrix.repo-owner }}
      RELEASE_VERSION: ${{ needs.publish_image.outputs.RELEASE_VERSION }}
      DIGEST: ${{ needs.publish_image.outputs.DIGEST }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Add Annotation for redhat-marketplace-operators
        if: env.REPO_NAME == 'redhat-marketplace-operators'
        run: |
          OPERATOR_NAME_RHPM=${OPERATOR_NAME}-rhmp
          echo "OPERATOR_NAME_RHPM=${OPERATOR_NAME_RHPM}" >> $GITHUB_ENV

          curl -sSLo ./bin/yq https://github.com/mikefarah/yq/releases/download/v4.18.1/yq_linux_amd64 --create-dirs
          chmod +x ./bin/yq

          ./bin/yq -i e ".metadata.annotations += \
          {\"marketplace.openshift.io/remote-workflow\": \"https://marketplace.redhat.com/en-us/operators/${OPERATOR_NAME_RHPM}/pricing?utm_source=openshift_console\", \
           \"marketplace.openshift.io/support-workflow\": \"https://marketplace.redhat.com/en-us/operators/${OPERATOR_NAME_RHPM}/support?utm_source=openshift_console\" }" \
          config/manifests/bases/${OPERATOR_NAME}.clusterserviceversion.yaml

      - name: Build Bundle
        run: |
          RED_HAT_OPERATOR_REPOSITORY=registry.connect.redhat.com/hazelcast/${OPERATOR_NAME}
          RED_HAT_OPERATOR_IMG=${RED_HAT_OPERATOR_REPOSITORY}@${DIGEST}

          make bundle IMG=${RED_HAT_OPERATOR_IMG} VERSION=${RELEASE_VERSION}
          cat >> ./bundle/metadata/annotations.yaml <<EOF
            # OpenShift annotations.
            com.redhat.openshift.versions: "v4.6"
            operators.operatorframework.io.bundle.channel.default.v1: alpha
          EOF

      - name: Change package name for redhat-marketplace-operators
        if: env.REPO_NAME == 'redhat-marketplace-operators'
        run: |
          sed -i "s|operators.operatorframework.io.bundle.package.v1: ${OPERATOR_NAME}|operators.operatorframework.io.bundle.package.v1: ${OPERATOR_NAME_RHPM}|" bundle/metadata/annotations.yaml
          mv bundle/manifests/${OPERATOR_NAME}.clusterserviceversion.yaml bundle/manifests/${OPERATOR_NAME_RHPM}.clusterserviceversion.yaml

          echo "OPERATOR_NAME=${OPERATOR_NAME_RHPM}" >> $GITHUB_ENV

      - name: Validate Bundle for OCP
        run: |
          make bundle-ocp-validate

      - name: Checkout to devOpsHelm/${{ env.REPO_NAME }}
        uses: actions/checkout@v2
        with:
          repository: devOpsHelm/${{ env.REPO_NAME }}
          path: ${{ env.REPO_NAME }}
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}

      - name: Update main branch of the fork
        working-directory: ${{ env.REPO_NAME }}
        run: |
          git checkout main
          git remote add upstream https://github.com/${REPO_OWNER}/${REPO_NAME}.git
          git pull upstream main
          git push origin main

      - name: Set Bundle Release Version
        run: |
          BUNDLE_RELEASE_VERSION=$( make print-bundle-version VERSION=${RELEASE_VERSION} )
          echo "BUNDLE_RELEASE_VERSION=${BUNDLE_RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Commit and push changes to bundle
        working-directory: ${{ env.REPO_NAME }}
        run: |
          git config user.email "devopshelm@hazelcast.com"
          git config user.name "devOpsHelm"
          BRANCH_NAME=${OPERATOR_NAME}-${BUNDLE_RELEASE_VERSION}-${{ github.run_id }}

          # Copy bundle files under new version of the operator
          git checkout -b $BRANCH_NAME
          mkdir -p operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}
          cp -r ../bundle/* operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}/

          # Commit and push changes
          git add  ./operators/${OPERATOR_NAME}
          git commit --signoff -m "Update ${OPERATOR_NAME} to ${BUNDLE_RELEASE_VERSION}"
          git push -u origin $BRANCH_NAME

      - name: Create PR
        working-directory: ${{ env.REPO_NAME }}
        run: |
          echo ${{ secrets.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          gh pr create --title "operator ${OPERATOR_NAME} \
            (${BUNDLE_RELEASE_VERSION})" --body "" --repo ${REPO_OWNER}/${REPO_NAME}

  slack_notify:
    name: Slack Notify
    needs: [ 'publish_image', 'redhat_bundle_release' ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: 8398a7/action-slack@f3635935f58910a6d6951b73efe9037c960c8c04
        if: needs.publish_image.result != 'success' || needs.redhat_bundle_release.result != 'success'
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: ${{ needs.redhat_bundle_release.result }}
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
